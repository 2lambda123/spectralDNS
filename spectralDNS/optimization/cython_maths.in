#cython: boundscheck=False
#cython: wraparound=False
cimport numpy as np

{0}

ctypedef fused T:
    np.float64_t
    np.float32_t
    np.int64_t
    np.int32_t

def cross1(np.ndarray[real_t, ndim=4] c,
           np.ndarray[real_t, ndim=4] a,
           np.ndarray[real_t, ndim=4] b):
    cdef unsigned int i, j, k
    cdef real_t a0, a1, a2, b0, b1, b2
    for i in xrange(a.shape[1]):
        for j in xrange(a.shape[2]):
            for k in xrange(a.shape[3]):
                a0 = a[0,i,j,k]
                a1 = a[1,i,j,k]
                a2 = a[2,i,j,k]
                b0 = b[0,i,j,k]
                b1 = b[1,i,j,k]
                b2 = b[2,i,j,k]
                c[0,i,j,k] = a1*b2 - a2*b1
                c[1,i,j,k] = a2*b0 - a0*b2
                c[2,i,j,k] = a0*b1 - a1*b0
    return c

def cross2(c, a, b):
    if isinstance(a, list):
        c = _cross3(c, a, b)
    else:
        c = _cross2(c, a, b)
    return c

def _cross2(np.ndarray[complex_t, ndim=4] c,
           np.ndarray[T, ndim=4] a,
           np.ndarray[complex_t, ndim=4] b):
    cdef unsigned int i, j, k
    cdef T a0, a1, a2
    cdef complex_t b0, b1, b2
    for i in xrange(a.shape[1]):
        for j in xrange(a.shape[2]):
            for k in xrange(a.shape[3]):
                a0 = a[0,i,j,k]
                a1 = a[1,i,j,k]
                a2 = a[2,i,j,k]
                b0 = b[0,i,j,k]
                b1 = b[1,i,j,k]
                b2 = b[2,i,j,k]
                c[0,i,j,k].real = -(a1*b2.imag - a2*b1.imag)
                c[0,i,j,k].imag = a1*b2.real - a2*b1.real
                c[1,i,j,k].real = -(a2*b0.imag - a0*b2.imag)
                c[1,i,j,k].imag = a2*b0.real - a0*b2.real
                c[2,i,j,k].real = -(a0*b1.imag - a1*b0.imag)
                c[2,i,j,k].imag = a0*b1.real - a1*b0.real
    return c

def _cross3(np.ndarray[complex_t, ndim=4] c,
           list a,
           np.ndarray[complex_t, ndim=4] b):
    cdef unsigned int i, j, k
    cdef real_t a0, a1, a2
    cdef complex_t b0, b1, b2
    cdef np.ndarray[real_t, ndim=3] kx = a[0]
    cdef np.ndarray[real_t, ndim=3] ky = a[1]
    cdef np.ndarray[real_t, ndim=3] kz = a[2]
    for i in xrange(b.shape[1]):
        for j in xrange(b.shape[2]):
            for k in xrange(b.shape[3]):
                a0 = kx[i,j,k]
                a1 = ky[i,j,k]
                a2 = kz[i,j,k]
                b0 = b[0,i,j,k]
                b1 = b[1,i,j,k]
                b2 = b[2,i,j,k]
                c[0,i,j,k].real = -(a1*b2.imag - a2*b1.imag)
                c[0,i,j,k].imag = a1*b2.real - a2*b1.real
                c[1,i,j,k].real = -(a2*b0.imag - a0*b2.imag)
                c[1,i,j,k].imag = a2*b0.real - a0*b2.real
                c[2,i,j,k].real = -(a0*b1.imag - a1*b0.imag)
                c[2,i,j,k].imag = a0*b1.real - a1*b0.real
    return c


def cross1_2D(np.ndarray[real_t, ndim=2] c,
              np.ndarray[real_t, ndim=3] a,
              np.ndarray[real_t, ndim=3] b):
    cdef unsigned int i, j
    cdef real_t a0, a1, b0, b1
    with nogil:
        for i in xrange(a.shape[1]):
            for j in xrange(a.shape[2]):
                a0 = a[0,i,j]
                a1 = a[1,i,j]
                b0 = b[0,i,j]
                b1 = b[1,i,j]
                c[i,j] = a0*b1 - a1*b0
    return c

def cross2_2D(np.ndarray[complex_t, ndim=2] c,
              np.ndarray[T, ndim=3] a,
              np.ndarray[complex_t, ndim=3] b):
    cdef unsigned int i, j
    cdef T a0, a1
    cdef complex_t b0, b1
    for i in xrange(a.shape[1]):
        for j in xrange(a.shape[2]):
            a0 = a[0,i,j]
            a1 = a[1,i,j]
            b0 = b[0,i,j]
            b1 = b[1,i,j]
            c[i,j].real = -(a0*b1.imag - a1*b0.imag)
            c[i,j].imag = a0*b1.real - a1*b0.real
    return c

def mult_K1j(np.ndarray[np.float64_t, ndim=4] K,
             np.ndarray[np.complex128_t, ndim=3] a,
             np.ndarray[np.complex128_t, ndim=4] f):
    cdef unsigned int i, j, k
    for i in xrange(a.shape[0]):
        for j in xrange(a.shape[1]):
            for k in xrange(a.shape[2]):
                f[0,i,j,k] = 1j*K[2,i,j,k]*a[i,j,k]
                f[1,i,j,k] = -1j*K[1,i,j,k]*a[i,j,k]
    return f

def copy_to_padded_channel(np.ndarray[np.complex128_t, ndim=3] fu,
                           np.ndarray[np.complex128_t, ndim=3] fp,
                           np.ndarray[np.int64_t, ndim=1] N,
                           int axis=0):
    cdef:
        int i, j, k, l

    if axis == 0:
        for i in xrange(N[0]):
            for j in xrange(fu.shape[1]):
                for k in xrange(fu.shape[2]):
                    fp[i, j, k] = fu[i, j, k]
    elif axis == 1:
        for i in xrange(fp.shape[0]):
            for j in xrange(N[1]/2):
                for k in xrange(fu.shape[2]):
                    fp[i, j, k] = fu[i, j, k]
                    fp[i, N[1]+j, k] = fu[i, N[1]//2+j, k]

    elif axis == 2:
        for i in xrange(fp.shape[0]):
            for j in xrange(fp.shape[1]):
                for k in xrange(N[2]/2+1):
                    fp[i, j, k] = fu[i, j, k]
    return fp

def copy_from_padded_channel(np.ndarray[np.complex128_t, ndim=3] fp,
                             np.ndarray[np.complex128_t, ndim=3] fu,
                             np.ndarray[np.int64_t, ndim=1] N,
                             int axis=0):
    cdef:
        int i, j, k, l

    if axis == 1:
        for i in xrange(fu.shape[0]):
            for j in xrange(fu.shape[1]):
                l =  j if (j < N[1]//2) else N[1]//2 + j
                for k in xrange(fu.shape[2]):
                    fu[i, j, k] = fp[i, l, k]
    elif axis == 2:
        for i in xrange(fu.shape[0]):
            for j in xrange(fu.shape[1]):
                for k in xrange(fu.shape[2]):
                    fu[i,j,k] = fp[i,j,k]

    return fu

def set_w_hat_channel(w_hat, fk, factor1, factor2):
    if len(w_hat.shape) == 3:
        return set_w_hat_channel_3D(w_hat, fk, factor1, factor2)
    elif len(w_hat.shape) == 1:
        return set_w_hat_channel_1D(w_hat, fk, factor1, factor2)

def set_w_hat_channel_1D(np.ndarray[np.float64_t, ndim=1, mode='c'] w_hat,
                         np.ndarray[np.float64_t, ndim=1, mode='c'] fk,
                         np.ndarray[np.float64_t, ndim=1, mode='c'] factor1,
                         np.ndarray[np.float64_t, ndim=1, mode='c'] factor2):
    cdef unsigned int i, N=w_hat.shape[0]

    for i in range(4, N-4):
        w_hat[i] = fk[i] + (factor1[i-2]*fk[i-2]+factor2[i-4]*fk[i-4])

    for i in range(2):
        w_hat[i] = fk[i]

    for i in range(2,4):
        w_hat[i] = fk[i] + factor1[i-2]*fk[i-2]

    for i in range(N-2, N):
        w_hat[i] = factor2[i-4]*fk[i-4]

    for i in range(N-4, N-2):
        w_hat[i] = factor1[i-2]*fk[i-2] + factor2[i-4]*fk[i-4]

    return w_hat

def set_w_hat_channel_3D(np.ndarray[np.complex128_t, ndim=3, mode='c'] w_hat,
                         np.ndarray[np.complex128_t, ndim=3, mode='c'] fk,
                         np.ndarray[np.float64_t, ndim=3, mode='c'] factor1,
                         np.ndarray[np.float64_t, ndim=3, mode='c'] factor2):
    cdef unsigned int i, j, k, N=w_hat.shape[0]

    for i in range(4, N-4):
        for j in range(w_hat.shape[1]):
            for k in range(w_hat.shape[2]):
                w_hat[i,j,k] = fk[i,j,k] + (factor1[i-2,j,k]*fk[i-2,j,k]+factor2[i-4,j,k]*fk[i-4,j,k])

    for i in range(2):
        for j in range(w_hat.shape[1]):
            for k in range(w_hat.shape[2]):
                w_hat[i,j,k] = fk[i,j,k]

    for i in range(2,4):
        for j in range(w_hat.shape[1]):
            for k in range(w_hat.shape[2]):
                w_hat[i,j,k] = fk[i,j,k] + factor1[i-2,j,k]*fk[i-2,j,k]

    for i in range(N-2, N):
        for j in range(w_hat.shape[1]):
            for k in range(w_hat.shape[2]):
                w_hat[i,j,k] = factor2[i-4,j,k]*fk[i-4,j,k]

    for i in range(N-4, N-2):
        for j in range(w_hat.shape[1]):
            for k in range(w_hat.shape[2]):
                w_hat[i,j,k] = factor1[i-2,j,k]*fk[i-2,j,k] + factor2[i-4,j,k]*fk[i-4,j,k]

    return w_hat

