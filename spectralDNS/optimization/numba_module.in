from numba import jit, int64, int32, uint8, autojit
from numba.types import List, Tuple, pyobject

from numba import {0} as float
from numba import {1} as complex


#def RK4(U_hat, U_hat0, U_hat1, dU, a, b, dt, solver, context):
    #globals().update(dict(solver=solver, context=context))
    #a = RK4_(U_hat, U_hat0, U_hat1, dU, a, b, dt)
    #return a

#@jit(Tuple((complex[:,:,:,:], float, float))(complex[:,:,:,:], complex[:,:,:,:], complex[:,:,:,:],
                      #complex[:,:,:,:], float[:], float[:], float))
#def RK4_(U_hat, U_hat0, U_hat1, dU, a, b, dt):
    #for i in range(dU.shape[0]):
        #for j in range(dU.shape[1]):
            #for k in range(dU.shape[2]):
                #for l in range(dU.shape[3]):
                    #z = U_hat[i,j,k,l]
                    #U_hat1[i,j,k,l] = z
                    #U_hat0[i,j,k,l] = z
    #c = context
    #for rk in range(4):
        #dU = solver.ComputeRHS(dU, U_hat, solver, c.work, c.FFT, c.P_hat, c.K, c.K2, c.K_over_K2)
        #if rk < 3:
            #for i in range(dU.shape[0]):
                #for j in range(dU.shape[1]):
                    #for k in range(dU.shape[2]):
                        #for l in range(dU.shape[3]):
                            #U_hat[i,j,k,l] = U_hat0[i,j,k,l] + b[rk]*dt*dU[i,j,k,l]

        #for i in range(dU.shape[0]):
            #for j in range(dU.shape[1]):
                #for k in range(dU.shape[2]):
                    #for l in range(dU.shape[3]):
                        #U_hat1[i,j,k,l] = U_hat1[i,j,k,l] + a[rk]*dt*dU[i,j,k,l]

    #for i in range(dU.shape[0]):
        #for j in range(dU.shape[1]):
            #for k in range(dU.shape[2]):
                #for l in range(dU.shape[3]):
                    #U_hat[i,j,k,l] = U_hat1[i,j,k,l]

    #return U_hat, dt, dt

#@jit(complex[:,:,:,:](complex[:,:,:,:], complex[:,:,:,:], complex[:,:,:,:], float))
#def ForwardEuler(U_hat, U_hat0, dU, dt):
    #dU = ComputeRHS(dU, 0)
    #for i in range(dU.shape[0]):
        #for j in range(dU.shape[1]):
            #for k in range(dU.shape[2]):
                #for l in range(dU.shape[3]):
                    #U_hat[i,j,k,l] = U_hat[i,j,k,l] + dU[i,j,k,l]*dt

#@jit(complex[:,:,:,:](complex[:,:,:,:], complex[:,:,:,:], complex[:,:,:,:], float, int64))
#def AB2(U_hat, U_hat0, dU, dt, tstep):
    #p0 = 1.5
    #p1 = 0.5
    #dU = ComputeRHS(dU, 0)

    #if tstep == 1:
        #for i in range(dU.shape[0]):
            #for j in range(dU.shape[1]):
                #for k in range(dU.shape[2]):
                    #for l in range(dU.shape[3]):
                        #U_hat[i,j,k,l] = U_hat[i,j,k,l] + dU[i,j,k,l]*dt

    #else:
        #for i in range(dU.shape[0]):
            #for j in range(dU.shape[1]):
                #for k in range(dU.shape[2]):
                    #for l in range(dU.shape[3]):
                        #U_hat[i,j,k,l] = U_hat[i,j,k,l] + p0*dU[i,j,k,l]*dt - p1*U_hat0[i,j,k,l]

    #for i in range(dU.shape[0]):
        #for j in range(dU.shape[1]):
            #for k in range(dU.shape[2]):
                #for l in range(dU.shape[3]):
                    #U_hat0[i,j,k,l] = dU[i,j,k,l]*dt

@jit(float[:,:,:,:](float[:,:,:,:], float[:,:,:,:], float[:,:,:,:]), nopython=True)
def cross1(c, a, b):
    """Regular c = a x b"""
    for i in range(a.shape[1]):
        for j in range(a.shape[2]):
            for k in range(a.shape[3]):
                a0 = a[0,i,j,k]
                a1 = a[1,i,j,k]
                a2 = a[2,i,j,k]
                b0 = b[0,i,j,k]
                b1 = b[1,i,j,k]
                b2 = b[2,i,j,k]
                c[0,i,j,k] = a1*b2 - a2*b1
                c[1,i,j,k] = a2*b0 - a0*b2
                c[2,i,j,k] = a0*b1 - a1*b0
    return c

@jit(complex[:,:,:,:](complex[:,:,:,:], int64[:,:,:,:], complex[:,:,:,:]), nopython=True)
def cross2a(c, a, b):
    """ c = 1j*(a x b)"""
    for i in range(a.shape[1]):
        for j in range(a.shape[2]):
            for k in range(a.shape[3]):
                a0 = a[0,i,j,k]
                a1 = a[1,i,j,k]
                a2 = a[2,i,j,k]
                b0 = b[0,i,j,k]
                b1 = b[1,i,j,k]
                b2 = b[2,i,j,k]
                c[0,i,j,k] = -(a1*b2.imag - a2*b1.imag) +1j*(a1*b2.real - a2*b1.real)
                c[1,i,j,k] = -(a2*b0.imag - a0*b2.imag) +1j*(a2*b0.real - a0*b2.real)
                c[2,i,j,k] = -(a0*b1.imag - a1*b0.imag) +1j*(a0*b1.real - a1*b0.real)
    return c

@jit(complex[:,:,:,:](complex[:,:,:,:], float[:,:,:,:], complex[:,:,:,:]), nopython=True)
def cross2b(c, a, b):
    """ c = 1j*(a x b)"""
    for i in range(a.shape[1]):
        for j in range(a.shape[2]):
            for k in range(a.shape[3]):
                a0 = a[0,i,j,k]
                a1 = a[1,i,j,k]
                a2 = a[2,i,j,k]
                b0 = b[0,i,j,k]
                b1 = b[1,i,j,k]
                b2 = b[2,i,j,k]
                c[0,i,j,k] = -(a1*b2.imag - a2*b1.imag) +1j*(a1*b2.real - a2*b1.real)
                c[1,i,j,k] = -(a2*b0.imag - a0*b2.imag) +1j*(a2*b0.real - a0*b2.real)
                c[2,i,j,k] = -(a0*b1.imag - a1*b0.imag) +1j*(a0*b1.real - a1*b0.real)
    return c

@jit(complex[:,:,:,:](complex[:,:,:,:], float[:,:,:], float[:,:,:], float[:,:,:], complex[:,:,:,:]))
def cross2c(c, a0, a1, a2, b):
    """ c = 1j*(a x b)"""
    for i in range(b.shape[1]):
        for j in range(b.shape[2]):
            for k in range(b.shape[3]):
                a00 = a0[i,0,0]
                a11 = a1[0,j,0]
                a22 = a2[0,0,k]
                b0 = b[0,i,j,k]
                b1 = b[1,i,j,k]
                b2 = b[2,i,j,k]
                c[0,i,j,k] = -(a11*b2.imag - a22*b1.imag) +1j*(a11*b2.real - a22*b1.real)
                c[1,i,j,k] = -(a22*b0.imag - a00*b2.imag) +1j*(a22*b0.real - a00*b2.real)
                c[2,i,j,k] = -(a00*b1.imag - a11*b0.imag) +1j*(a00*b1.real - a11*b0.real)
    return c

def cross2(c, a, b):
    if isinstance(a, list):
        c = cross2c(c, a[0], a[1], a[2], b)
    elif a.dtype == int64.key:
        c = cross2a(c, a, b)
    elif a.dtype == float.key:
        c = cross2b(c, a, b)
    return c


def add_pressure_diffusion_NS(du, u_hat, nu, ksq, kk, p_hat, k_over_k2):
    du = add_pressure_diffusion_NS_(du, u_hat, nu, ksq, kk[0][:,0,0], kk[1][0,:,0], kk[2][0,0,:], p_hat, k_over_k2)
    return du

@jit(complex[:,:,:,:](complex[:,:,:,:], complex[:,:,:,:], float,
                      float[:,:,:], float[:], float[:], float[:],
                      complex[:,:,:], float[:,:,:,:]), nopython=True)
def add_pressure_diffusion_NS_(du, u_hat, nu, ksq, kx, ky, kz, p_hat, k_over_k2):
    for i in range(ksq.shape[0]):
        k0 = kx[i]
        for j in range(ksq.shape[1]):
            k1 = ky[j]
            for k in range(ksq.shape[2]):
                z = nu*ksq[i,j,k]
                k2 = kz[k]
                p_hat[i,j,k] = du[0,i,j,k]*k_over_k2[0,i,j,k]+du[1,i,j,k]*k_over_k2[1,i,j,k]+du[2,i,j,k]*k_over_k2[2,i,j,k]
                du[0,i,j,k] = du[0,i,j,k] - (p_hat[i,j,k]*k0+u_hat[0,i,j,k]*z)
                du[1,i,j,k] = du[1,i,j,k] - (p_hat[i,j,k]*k1+u_hat[1,i,j,k]*z)
                du[2,i,j,k] = du[2,i,j,k] - (p_hat[i,j,k]*k2+u_hat[2,i,j,k]*z)
    return du
